{"ast":null,"code":"import { compose, createStore, applyMiddleware } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\n/*Logger allows me to see in the console what the state looks like before an action is dispatch, \nwhat the action is and then how the state intern look after the action*/\n\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./root-saga\";\nimport { rootReducer } from \"./root-reducer\"; //I want to keep the item in the cart when I refresh. For that I need to use redux-persist.\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"cart\"] //I want to persist the cart\n\n};\nconst sagaMiddleWare = createSagaMiddleware();\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n/* middleWares is kind of a library helpers that run before an action hit the reducer. \nI want to run this logger from middleWares only when I am in development and not when I am in production. \nFor that I need to leverage the process.env.NODE_ENV that tell me wether not I am in development or in prodcution\nbased on the string 'development' or 'production' */\n\nconst middleWares = [process.env.NODE_ENV !== \"production\" && logger, sagaMiddleWare].filter(Boolean); //I use Redux DevTools\n\nconst composeEnhancer = process.env.NODE_ENV !== \"production\" && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares)); //I generate the store :\n\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\n/* I need a persistedReducer in order to generate the store.\nThe second argument is a default state (optionnal).\nThe thirs argument is the middleWares */\n\nsagaMiddleWare.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"names":["compose","createStore","applyMiddleware","persistStore","persistReducer","storage","logger","createSagaMiddleware","rootSaga","rootReducer","persistConfig","key","whitelist","sagaMiddleWare","persistedReducer","middleWares","process","env","NODE_ENV","filter","Boolean","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composedEnhancers","store","undefined","run","persistor"],"sources":["/Users/clairekarsenti/Documents/GitHub/Clothes-eshop/Clothes-Eshop/src/store/store.js"],"sourcesContent":["import { compose, createStore, applyMiddleware } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\"; /*Logger allows me to see in the console what the state looks like before an action is dispatch, \nwhat the action is and then how the state intern look after the action*/\n\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootSaga } from \"./root-saga\";\n\nimport { rootReducer } from \"./root-reducer\";\n\n//I want to keep the item in the cart when I refresh. For that I need to use redux-persist.\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"cart\"], //I want to persist the cart\n};\n\nconst sagaMiddleWare = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n/* middleWares is kind of a library helpers that run before an action hit the reducer. \nI want to run this logger from middleWares only when I am in development and not when I am in production. \nFor that I need to leverage the process.env.NODE_ENV that tell me wether not I am in development or in prodcution\nbased on the string 'development' or 'production' */\nconst middleWares = [\n  process.env.NODE_ENV !== \"production\" && logger,\n  sagaMiddleWare,\n].filter(Boolean);\n\n//I use Redux DevTools\nconst composeEnhancer =\n  (process.env.NODE_ENV !== \"production\" &&\n    window &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n  compose;\n\nconst composedEnhancers = composeEnhancer(applyMiddleware(...middleWares));\n\n//I generate the store :\nexport const store = createStore(\n  persistedReducer,\n  undefined,\n  composedEnhancers\n);\n/* I need a persistedReducer in order to generate the store.\nThe second argument is a default state (optionnal).\nThe thirs argument is the middleWares */\n\nsagaMiddleWare.run(rootSaga);\n\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAAmC;AACnC;;AAEA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAEA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;;AACA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MADe;EAEpBN,OAFoB;EAGpBO,SAAS,EAAE,CAAC,MAAD,CAHS,CAGC;;AAHD,CAAtB;AAMA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AAEA,MAAMO,gBAAgB,GAAGV,cAAc,CAACM,aAAD,EAAgBD,WAAhB,CAAvC;AAEA;AACA;AACA;AACA;;AACA,MAAMM,WAAW,GAAG,CAClBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyCZ,MADvB,EAElBO,cAFkB,EAGlBM,MAHkB,CAGXC,OAHW,CAApB,C,CAKA;;AACA,MAAMC,eAAe,GAClBL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACCI,MADD,IAECA,MAAM,CAACC,oCAFT,IAGAvB,OAJF;AAMA,MAAMwB,iBAAiB,GAAGH,eAAe,CAACnB,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAzC,C,CAEA;;AACA,OAAO,MAAMU,KAAK,GAAGxB,WAAW,CAC9Ba,gBAD8B,EAE9BY,SAF8B,EAG9BF,iBAH8B,CAAzB;AAKP;AACA;AACA;;AAEAX,cAAc,CAACc,GAAf,CAAmBnB,QAAnB;AAEA,OAAO,MAAMoB,SAAS,GAAGzB,YAAY,CAACsB,KAAD,CAA9B"},"metadata":{},"sourceType":"module"}