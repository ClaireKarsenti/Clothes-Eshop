{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signInWithRedirect, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from \"firebase/firestore\"; // My web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB51SviP2NIfsh8o5k_ZAKd1LMEk5DDrsE\",\n  authDomain: \"crwn-clothing-db-89865.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-89865\",\n  storageBucket: \"crwn-clothing-db-89865.appspot.com\",\n  messagingSenderId: \"558515317340\",\n  appId: \"1:558515317340:web:a4e9a2a862650294f99499\"\n}; // Initialize Firebase\n\nconst firebaseApp = initializeApp(firebaseConfig); // Google authentication\n\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider); // Database\n\nexport const db = getFirestore(); //I create a new collection\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey); //This is the new collection\n\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log(\"done\");\n};\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map(docSnapshot => docSnapshot.data());\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return; //If I don't have a userAuth I want a return\n\n  const userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection', identifier) identifier = unique id\n\n  const userSnapshot = await getDoc(userDocRef); //If user data does not exist\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); //when the user is sign-in\n    //create / set the document with the data from userAuth in my collection\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  } //If user data exists return userDocRef\n\n\n  return userDocRef;\n}; // Email & password create with sign-up\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; //If we don't have an email or password we want a return\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n}; // Email & password authentication with sign-in\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; //If we don't have an email or password we want a return\n\n  return await signInWithEmailAndPassword(auth, email, password);\n}; // Sign out\n\nexport const signOutUser = async () => await signOut(auth); //When ever a user is authenticated in or out\n\nexport const onAuthStateChangedListener = callback => //The moment I call this onAuthStateChanged method, It's like I said \"create a listerner for me using this callback\"\n//This is a permanently open listerner\nonAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","signInWithRedirect","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","docs","map","docSnapshot","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/clairekarsenti/Documents/GitHub/Clothes-eshop/Clothes-Eshop/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\n\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n} from \"firebase/firestore\";\n\n// My web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB51SviP2NIfsh8o5k_ZAKd1LMEk5DDrsE\",\n  authDomain: \"crwn-clothing-db-89865.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-89865\",\n  storageBucket: \"crwn-clothing-db-89865.appspot.com\",\n  messagingSenderId: \"558515317340\",\n  appId: \"1:558515317340:web:a4e9a2a862650294f99499\",\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\n// Google authentication\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\n// Database\nexport const db = getFirestore();\n\n//I create a new collection\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = collection(db, collectionKey); //This is the new collection\n  const batch = writeBatch(db);\n\n  objectsToAdd.forEach((object) => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n\n  await batch.commit();\n  console.log(\"done\");\n};\n\nexport const getCategoriesAndDocuments = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n\n  const querySnapshot = await getDocs(q);\n  return querySnapshot.docs.map((docSnapshot) => docSnapshot.data());\n};\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return; //If I don't have a userAuth I want a return\n\n  const userDocRef = doc(db, \"users\", userAuth.uid); // (database, 'collection', identifier) identifier = unique id\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  //If user data does not exist\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date(); //when the user is sign-in\n\n    //create / set the document with the data from userAuth in my collection\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  //If user data exists return userDocRef\n  return userDocRef;\n};\n\n// Email & password create with sign-up\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; //If we don't have an email or password we want a return\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\n// Email & password authentication with sign-in\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return; //If we don't have an email or password we want a return\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\n// Sign out\nexport const signOutUser = async () => await signOut(auth);\n\n//When ever a user is authenticated in or out\nexport const onAuthStateChangedListener = (callback) =>\n  //The moment I call this onAuthStateChanged method, It's like I said \"create a listerner for me using this callback\"\n  //This is a permanently open listerner\n  onAuthStateChanged(auth, callback);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}